-- Create material_logs table
-- Drop existing foreign key constraint if exists
DO $$ BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'material_logs_material_id_fkey'
        AND table_name = 'material_logs'
    ) THEN
        ALTER TABLE public.material_logs DROP CONSTRAINT material_logs_material_id_fkey;
    END IF;
END $$;

-- Create or update material_logs table
CREATE TABLE IF NOT EXISTS public.material_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    material_id BIGINT NULL, -- Explicitly set to NULL to allow NULL values
    action_type TEXT NOT NULL CHECK (action_type IN ('create', 'update', 'delete')),
    username TEXT NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    details JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add foreign key constraint with ON DELETE SET NULL
ALTER TABLE public.material_logs
    ADD CONSTRAINT material_logs_material_id_fkey
    FOREIGN KEY (material_id)
    REFERENCES public.materials(id)
    ON DELETE SET NULL;

-- Add indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_material_logs_material_id ON public.material_logs(material_id);
CREATE INDEX IF NOT EXISTS idx_material_logs_action_type ON public.material_logs(action_type);
CREATE INDEX IF NOT EXISTS idx_material_logs_timestamp ON public.material_logs(timestamp);

-- Add RLS policies
ALTER TABLE public.material_logs ENABLE ROW LEVEL SECURITY;

-- Allow read access to all authenticated users
DO $$ BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'material_logs' 
        AND policyname = 'Allow read access for all authenticated users'
    ) THEN
        CREATE POLICY "Allow read access for all authenticated users" 
            ON public.material_logs FOR SELECT 
            USING (auth.role() = 'authenticated');
    END IF;
END $$;

-- Allow insert access to all authenticated users
DO $$ BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'material_logs' 
        AND policyname = 'Allow insert access for all authenticated users'
    ) THEN
        CREATE POLICY "Allow insert access for all authenticated users" 
            ON public.material_logs FOR INSERT 
            WITH CHECK (auth.role() = 'authenticated');
    END IF;
END $$;